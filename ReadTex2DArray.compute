// Each #kernel tells which function to compile; you can have many kernels.
#pragma kernel ReadTex2DArray


// Read write 2D array.
RWTexture2DArray<float4> ResultTexture;

// Used by color conversions.
static const float Epsilon = 1e-10;

uniform const uint _LayerCount;


float3 HUEtoRGB(in float H)
{
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    return saturate(float3(R,G,B));
}


float3 HSVtoRGB(in float3 HSV)
{
    float3 RGB = HUEtoRGB(HSV.x);
    return ((RGB - 1) * HSV.y + 1) * HSV.z;
}


float3 RGBtoHCV(in float3 RGB)
{
    // Based on work by Sam Hocevar and Emil Persson
    float4 P = (RGB.g < RGB.b) ? float4(RGB.bg, -1.0, 2.0/3.0) : float4(RGB.gb, 0.0, -1.0/3.0);
    float4 Q = (RGB.r < P.x) ? float4(P.xyw, RGB.r) : float4(RGB.r, P.yzx);
    float C = Q.x - min(Q.w, Q.y);
    float H = abs((Q.w - Q.y) / (6 * C + Epsilon) + Q.z);
    return float3(H, C, Q.x);
}


float3 RGBtoHSV(in float3 RGB)
{
    float3 HCV = RGBtoHCV(RGB);
    float S = HCV.y / (HCV.z + Epsilon);
    return float3(HCV.x, S, HCV.z);
}


// Program that fills the array texture.
[numthreads(8,8,8)]
void ReadTex2DArray (uint3 id : SV_DispatchThreadID)
{
    // Set color hue based on the depth index.
    float3 color = HSVtoRGB(float3((float)id.z/(float)_LayerCount, 1, 1));

    // Write values to the result texture.
    ResultTexture[id.xyz] = float4(color, 1);
}
